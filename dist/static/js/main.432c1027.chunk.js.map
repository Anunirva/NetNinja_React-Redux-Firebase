{"version":3,"sources":["components/layouts/SignedInLinks.js","store/actions/authAction.js","components/layouts/SignedOutLinks.js","components/layouts/Navbar.js","components/dashboard/Notifications.js","components/projects/ProjectSummary.js","components/projects/ProjectList.js","components/dashboard/Dashboard.js","components/projects/ProjectDetails.js","components/authentication/SignIn.js","components/authentication/SignUp.js","components/projects/CreateProject.js","store/actions/createProject.js","components/pagenotfound/NotFound.js","App.js","serviceWorker.js","store/reducers/authReducer..js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","config/firebaseConfig.js","index.js"],"names":["connect","rootReducer","initials","firebase","profile","dispatch","signOutHandler","getState","_ref2","getFirebase","auth","signOut","then","logout","type","catch","error","props","react_default","a","createElement","className","NavLink","to","onClick","SignedOutLinks","authStatus","links","uid","layouts_SignedInLinks","layouts_SignedOutLinks","Link","Notifications","notifications","map","item","key","id","user","content","moment","time","toDate","fromNow","ProjectSummary","_ref","project","title","authorFirstName","authorLastName","createdAt","calendar","ProjectList","projects","concat","projects_ProjectSummary","Dashboard","_this$props","this","projectList","projects_ProjectList","dashboard_Notifications","Redirect","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","SignIn","state","email","password","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","signInHandler","authError","onSubmit","htmlFor","onChange","credentials","signInWithEmailAndPassword","signIn","SignUp","firstName","lastName","signUpHandler","_this2","newUser","_ref3","getFirestore","createUserWithEmailAndPassword","res","doc","set","signUpUser","CreateProject","createProjectHandler","history","push","authorId","add","objectSpread","Date","payload","createProject","App","BrowserRouter","layouts_Navbar","Switch","Route","exact","path","component","ProjectDetails","NotFound","Boolean","window","location","hostname","initialState","authReducer","arguments","length","undefined","action","console","log","message","projectReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","store","createStore","applyMiddleware","thunk","withExtraArgument","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","reduxFirestore","firebaseAuthIsReady","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.432c1027.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { signOut } from \"../../store/actions/authAction\";\r\n// Navlink gives you the active link present where LINK doesnt give u\r\n\r\nconst SignedInLinks = props => {\r\n  const { initials } = props;\r\n  return (\r\n    <div>\r\n      <ul className=\"right\">\r\n        <li>\r\n          <NavLink to=\"/create\">New Project</NavLink>\r\n        </li>\r\n        <li>\r\n          <a onClick={props.signOutHandler}>Log Out</a>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/\" className=\"btn btn-floating pink lighten-1\">\r\n            {initials}\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    signOutHandler: () => dispatch(signOut())\r\n  };\r\n};\r\nconst mapStateToProps = rootReducer => {\r\n  return {\r\n    initials: rootReducer.firebase.profile.initials\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SignedInLinks);\r\n","// Get signin action from component\r\nexport const signIn = credentials => {\r\n  return (dispatch, getState, { getFirebase }) => {\r\n    const firebase = getFirebase();\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(credentials.email, credentials.password)\r\n      .then(() => {\r\n        dispatch({ type: \"LOGIN_SUCCESS\" });\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: \"LOGIN_ERROR\" });\r\n      });\r\n  };\r\n};\r\n\r\nexport const signOut = () => {\r\n  return (dispatch, getState, { getFirebase }) => {\r\n    const firebase = getFirebase();\r\n    firebase\r\n      .auth()\r\n      .signOut()\r\n      .then(() => {\r\n        firebase.logout(); // to remove any firestore rules error\r\n        dispatch({ type: \"SIGNOUT_SUCCESS\" });\r\n      })\r\n      .catch(error => {\r\n        firebase.logout(); // to remove any firestore rules error\r\n        dispatch({ type: \"SIGNOUT_ERROR\" });\r\n      });\r\n  };\r\n};\r\n\r\nexport const signUpUser = newUser => {\r\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n    const firebase = getFirebase();\r\n    const firestore = getFirestore();\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(newUser.email, newUser.password)\r\n      .then(res => {\r\n        // Once the signup is successfull, we are trying to save the details\r\n        // of the user in users collection with id coming from res\r\n        return firestore\r\n          .collection(\"users\")\r\n          .doc(res.user.uid)\r\n          .set({\r\n            firstName: newUser.firstName,\r\n            lastName: newUser.lastName,\r\n            initials: newUser.firstName[0] + newUser.lastName[0]\r\n          });\r\n      })\r\n      .then(() => {\r\n        dispatch({ type: \"SIGNUP_SUCCESS\" });\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: \"SIGNUP_ERROR\", error });\r\n      });\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n// Navlink gives you the active link present where LINK doesnt give u\r\n\r\nconst SignedOutLinks = () => {\r\n  return (\r\n    <div>\r\n      <ul className=\"right\">\r\n        <li>\r\n          <NavLink to=\"/signup\">SignUp</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/signin\">Login</NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignedOutLinks;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SignedInLinks from \"./SignedInLinks.js\";\r\nimport SignedOutLinks from \"./SignedOutLinks.js\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Navbar = props => {\r\n  const { authStatus } = props;\r\n  // Conditionally show links here based on auth\r\n  // Whether user is present or not\r\n  const links = authStatus.uid ? <SignedInLinks /> : <SignedOutLinks />;\r\n  return (\r\n    <nav className=\"nav-wrapper grey darken-3\">\r\n      <div className=\"container\">\r\n        <Link to=\"/\" className=\"brand-logo\">\r\n          MarioPlan\r\n        </Link>\r\n        {links}\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = rootReducer => {\r\n  //console.log(\"rootReducer:\", rootReducer);\r\n  return {\r\n    authStatus: rootReducer.firebase.auth\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(Navbar);\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst Notifications = props => {\r\n  const { notifications } = props;\r\n  return (\r\n    <div className=\"section\">\r\n      <div className=\"card z-depth-0\">\r\n        <div className=\"card-content\">\r\n          <span className=\"card-title\">Notifications</span>\r\n          <ul className=\"online-users\">\r\n            {notifications &&\r\n              notifications.map(item => {\r\n                return (\r\n                  <li key={item.id}>\r\n                    <span className=\"pink-text\">{item.user} </span>\r\n                    <span>{item.content}</span>\r\n                    <div className=\"note-date grey-text\">\r\n                      {moment(item.time.toDate()).fromNow()}\r\n                    </div>\r\n                  </li>\r\n                );\r\n              })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n","import React from \"react\";\r\nimport moment from \"moment\"; // use to tranform dates\r\n\r\n// List of all Projetcs\r\n\r\nconst ProjectSummary = ({ project }) => {\r\n  return (\r\n    <div className=\"project-list section\">\r\n      <div className=\"card z-depth-0 project-summary\">\r\n        <div className=\"card-content grey-text text-darken-3\">\r\n          <span className=\"card-title \">{project.title}</span>\r\n          <p>\r\n            Posted by {project.authorFirstName} {project.authorLastName}\r\n          </p>\r\n          <p className=\"grey-text\">\r\n            {moment(project.createdAt.toDate()).calendar()}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectSummary;\r\n","import React from \"react\";\r\nimport ProjectSummary from \"./ProjectSummary\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ProjectList = ({ projects }) => {\r\n  return (\r\n    <div className=\"project-list section\">\r\n      {projects &&\r\n        projects.map(project => {\r\n          return (\r\n            <Link to={`/project/${project.id}`} key={project.id}>\r\n              <ProjectSummary project={project} />\r\n            </Link>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectList;\r\n\r\n// Now we got projects array from dashboard\r\n// we need to loop through projects and render those individual project;\r\n// Get those projects and check\r\n// by projects &&  -> this will amke sure that if projects exists then execute the\r\n// next part to it\r\n// ie using map property and pass individual project\r\n\r\n// Ex for implementation\r\n// {projects &&\r\n//   projects.map(project => {\r\n//     return <div key={project.id}>{project.title}</div>;\r\n//   })}\r\n","import React, { Component } from \"react\";\r\nimport Notifications from \"./Notifications\";\r\nimport ProjectList from \"../projects/ProjectList\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { firestoreConnect } from \"react-redux-firebase\";\r\nimport { compose } from \"redux\";\r\nimport { Redirect } from \"react-router-dom\"; // this is used to redirect routes\r\n\r\nclass Dashboard extends Component {\r\n  render() {\r\n    // here we are getting projects in the form of props which is explained at bottom\r\n    // Now pass those projects to project list compo\r\n\r\n    // show this page only if user is logged in\r\n    // we have user information in reducer so get and that and use\r\n    // if user is not logged in and tryong to get this page we will redirect him to\r\n    // signin page\r\n    const { projectList, auth, notifications } = this.props;\r\n    if (!auth.uid) return <Redirect to=\"/signin\" />;\r\n    return (\r\n      <div className=\"dashboard container\">\r\n        <div className=\"row\">\r\n          <div className=\"col s12 m6\">\r\n            <ProjectList projects={projectList} />\r\n          </div>\r\n          <div className=\"col s12 m5 offset-m1\">\r\n            <Notifications notifications={notifications} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// Here we are getting the data in the form of props\r\n// Because our index.js our App comp is wrapped inside a provider\r\n// in rootReducer we have projecReducer assigned to project key\r\n// we will access that and get into projectsReducer and from there we will accces projects\r\n// which is in initial state\r\n\r\n// Now in root reducer we have premade firestore reducer\r\nconst mapStateToProps = rootReducer => {\r\n  // Our dashboard needs only projrcts, so we can listen to only that collection in firestore\r\n  // In order to connect our dashboard to firestore we will use hoc like bottom\r\n  // consolelog root reducer to see data in store\r\n  //console.log(\"rootReducer:\", rootReducer);\r\n  return {\r\n    projectList: rootReducer.firestore.ordered.projects,\r\n    // the above key 'projectList' naming can be anything, always reside inside our component\r\n    auth: rootReducer.firebase.auth,\r\n    // now get notifications from collection\r\n    notifications: rootReducer.firestore.ordered.notifications\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps),\r\n  firestoreConnect([\r\n    { collection: \"projects\", orderBy: [\"createdAt\", \"desc\"] }, // showing latest using date\r\n    { collection: \"notifications\", limit: 3, orderBy: [\"time\", \"desc\"] }\r\n  ])\r\n)(Dashboard);\r\n// export default connect(mapStateToProps)(Dashboard);\r\n// Now we have some data in the form of projects in projectReducer\r\n// we want to access that array of projects\r\n// But how do we do that\r\n// First import connect which is a HOC (higher order component)\r\n//which will take our component and gives itr some super powers\r\n// In this case it will connect our componnt to store\r\n// This connect will take one function which will map data from the store to our comp\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { firestoreConnect } from \"react-redux-firebase\";\r\nimport { compose } from \"redux\";\r\nimport { Redirect } from \"react-router-dom\"; // this is used to redirect routes\r\n\r\nimport moment from \"moment\"; // use to tranform dates\r\n\r\n// Single Project\r\n// On click of individual project we wan to show details of that particular proj\r\n\r\nconst ProjectDetails = props => {\r\n  const { project, auth } = props;\r\n  if (!auth.uid) return <Redirect to=\"/signin\" />;\r\n  if (project) {\r\n    return (\r\n      <div>\r\n        <div className=\"container section project-details\">\r\n          <div className=\"card z-depth-0\">\r\n            <div className=\"card-content\">\r\n              <span className=\"card-title\">{project.title}</span>\r\n              <p>{project.content}</p>\r\n            </div>\r\n            <div className=\"card-action grey lighten-4 grey-text\">\r\n              <div>\r\n                Posted by {project.authorFirstName} {project.authorLastName}\r\n              </div>\r\n              <div>{moment(project.createdAt.toDate()).calendar()}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"container center\">\r\n        <p>Loading project...</p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n// get that id from single project\r\n// now find single project from all project\r\n// for all projects we need firestoreconnect\r\n// to map this project to compo as props we need mapstatetoprops\r\nconst mapStateToProps = (rootReducer, ownProps) => {\r\n  const id = ownProps.match.params.id;\r\n  const projects = rootReducer.firestore.data.projects;\r\n  const project = projects ? projects[id] : null;\r\n  return {\r\n    project: project,\r\n    auth: rootReducer.firebase.auth\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps),\r\n  firestoreConnect([\r\n    {\r\n      collection: \"projects\"\r\n    }\r\n  ])\r\n)(ProjectDetails);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { signIn } from \"../../store/actions/authAction\";\r\nimport { Redirect } from \"react-router-dom\"; // this is used to redirect routes\r\n\r\nclass SignIn extends Component {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\"\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.signInHandler(this.state);\r\n  };\r\n  render() {\r\n    const { authError, auth } = this.props;\r\n    if (auth.uid) return <Redirect to=\"/\" />;\r\n    return (\r\n      <div className=\"container\">\r\n        <form className=\"white\" onSubmit={this.handleSubmit}>\r\n          <h5 className=\"grey-text text-darken-3\">Sign In</h5>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"email\">Email</label>\r\n            <input type=\"email\" id=\"email\" onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input type=\"password\" id=\"password\" onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <button className=\"btn pink lighten-1 z-depth-0\">Login</button>\r\n          </div>\r\n          <div className=\"center red-text\">\r\n            {/* Conditionally rendering if auth error is there show message else null */}\r\n            {authError ? <p>{authError}</p> : null}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    signInHandler: credentials => dispatch(signIn(credentials))\r\n  };\r\n};\r\n\r\nconst mapStateToProps = rootReducer => {\r\n  return {\r\n    authError: rootReducer.auth.authError,\r\n    auth: rootReducer.firebase.auth\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SignIn);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\"; // this is used to redirect routes\r\nimport { signUpUser } from \"../../store/actions/authAction\";\r\n\r\nclass SignUp extends Component {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\"\r\n  };\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.signUpHandler(this.state);\r\n  };\r\n  render() {\r\n    const { auth, authError } = this.props;\r\n    if (auth.uid) return <Redirect to=\"/\" />;\r\n    return (\r\n      <div className=\"container\">\r\n        <form className=\"white\" onSubmit={e => this.handleSubmit(e)}>\r\n          <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"email\">Email</label>\r\n            <input type=\"email\" id=\"email\" onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input type=\"password\" id=\"password\" onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"firstName\">First Name</label>\r\n            <input type=\"text\" id=\"firstName\" onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"lastName\">Last Name</label>\r\n            <input type=\"text\" id=\"lastName\" onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <button className=\"btn pink lighten-1 z-depth-0\">Sign Up</button>\r\n          </div>\r\n          <div className=\"center red-text\">\r\n            {authError ? <p>{authError}</p> : null}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = rootReducer => {\r\n  return {\r\n    auth: rootReducer.firebase.auth,\r\n    authError: rootReducer.auth.authError\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    signUpHandler: newUser => dispatch(signUpUser(newUser))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SignUp);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n// import action creators first\r\nimport { createProject } from \"../../store/actions/createProject\";\r\n\r\nclass CreateProject extends Component {\r\n  state = {\r\n    title: \"\",\r\n    content: \"\"\r\n  };\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.createProjectHandler(this.state);\r\n    this.props.history.push(\"/\");\r\n    // this.setState({\r\n    //   title: \"\",\r\n    //   content: \"\"\r\n    // });\r\n  };\r\n  render() {\r\n    const { auth } = this.props;\r\n    if (!auth.uid) return <Redirect to=\"/signin\" />;\r\n    return (\r\n      <div className=\"container\">\r\n        <form className=\"white\" onSubmit={this.handleSubmit}>\r\n          <h5 className=\"grey-text text-darken-3\">Create a New Project</h5>\r\n          <div className=\"input-field\">\r\n            <input type=\"text\" id=\"title\" onChange={this.handleChange} />\r\n            <label htmlFor=\"title\">Project Title</label>\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <textarea\r\n              id=\"content\"\r\n              className=\"materialize-textarea\"\r\n              onChange={this.handleChange}\r\n            />\r\n            <label htmlFor=\"content\">Project Content</label>\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <button className=\"btn pink lighten-1\">Create</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// things to know here\r\n// craeteProjectHandler is sending to our comp in the props\r\n// so that once the form is submitted we are calling this craeteProjectHandler\r\n// and assigning that  form value to it\r\n// then call the action creator from createproject action file\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    createProjectHandler: project => dispatch(createProject(project))\r\n  };\r\n};\r\n\r\nconst mapStateToProps = rootReducer => {\r\n  return {\r\n    auth: rootReducer.firebase.auth\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CreateProject);\r\n\r\n// connect will always takes two parameters\r\n// one is store data, other is any action creator\r\n","// First things first\r\n// Action is an object which cintains type and optional paylod\r\n// ex {type:EXAMPLE, payload: 'example'}\r\n// Action creator is something which is called from components to make actions\r\n// actions are the only one which modify the state\r\n// Here we are using redux thunk as middleware because calling backend/database\r\n// is an aysnc call which is it takes sometime to get data\r\n// genereally actions are sync ones, which is why we need thunk here\r\n// thunk returns an function instead of an obj\r\n// this fn will have all the functionalities\r\n// first this function will make call to backednm\r\n// once the call is done then only it will dispatch action\r\n\r\n// By adding firebase to our thunk and redux in index.js now we wil get access to firebase\r\n\r\nexport const createProject = project => {\r\n  return (dispatch, getState, { getFirestore }) => {\r\n    // this is fn we are talking about\r\n    // make call to backend /**async operation */\r\n    // then dispatch action, remember action is {} contains type and payload\r\n    // First thing add project to firestore\r\n    const firestore = getFirestore();\r\n    const profile = getState().firebase.profile;\r\n    const authorId = getState().firebase.auth.uid;\r\n    firestore\r\n      .collection(\"projects\")\r\n      .add({\r\n        ...project, // author values will get from auth\r\n        authorFirstName: profile.firstName,\r\n        authorLastName: profile.lastName,\r\n        authorId: authorId,\r\n        createdAt: new Date() // timebeing hardcoding values,\r\n      })\r\n      .then(() => {\r\n        dispatch({ type: \"CREATE_PROJECT\", payload: project });\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: \"CREATE_PROJECT_ERROR\", payload: error });\r\n      });\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst NotFound = props => {\r\n  const { auth } = props;\r\n  if (auth.uid) {\r\n    return (\r\n      <div>\r\n        <p>Sorry the page is closed..!!</p>\r\n        <Link to=\"/\">Login</Link>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <p>Sorry the page is closed..!!</p>\r\n      <Link to=\"/\">SignIn</Link>\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = rootReducer => {\r\n  return {\r\n    auth: rootReducer.firebase.auth\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(NotFound);\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/layouts/Navbar\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\nimport ProjectDetails from \"./components/projects/ProjectDetails\";\nimport SignIn from \"./components/authentication/SignIn\";\nimport SignUp from \"./components/authentication/SignUp\";\nimport CreateProject from \"./components/projects/CreateProject\";\nimport NotFound from \"./components/pagenotfound/NotFound\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={Dashboard} />\n            <Route path=\"/project/:id\" component={ProjectDetails} />\n            <Route path=\"/signin\" component={SignIn} />\n            <Route path=\"/signup\" component={SignUp} />\n            <Route path=\"/create\" component={CreateProject} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Reducer is a function which will take intial state and action as an argument\r\n// Based on action it will chnage the state and returns state;\r\n\r\nconst initialState = {\r\n  authError: null\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"LOGIN_SUCCESS\":\r\n      console.log(\"Login Success\");\r\n      return {\r\n        ...state,\r\n        authError: null\r\n      };\r\n    case \"LOGIN_ERROR\":\r\n      console.log(\"Login Error\");\r\n      return {\r\n        ...state,\r\n        authError: \"Login Failed\"\r\n      };\r\n    case \"SIGNOUT_SUCCESS\":\r\n      console.log(\"Signout success\");\r\n      return {\r\n        ...state,\r\n        authError: null\r\n      };\r\n    case \"SIGNUP_SUCCESS\":\r\n      console.log(\"SignUp success\");\r\n      return {\r\n        ...state,\r\n        authError: null\r\n      };\r\n    case \"SIGNUP_ERROR\":\r\n      console.log(\"Signup Error\");\r\n      return {\r\n        ...state,\r\n        authError: action.error.message\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n","// Reducer is a function which will take intial state and action as an argument\r\n// Based on action it will chnage the state and returns state;\r\n\r\n// Create some dummy data for the projects in intial state in future this will be replaces\r\nconst initialState = {\r\n  projects: [\r\n    { id: \"1\", title: \"help me find peach\", content: \"blah blah blah\" },\r\n    { id: \"2\", title: \"collect all the stars\", content: \"blah blah blah\" },\r\n    { id: \"3\", title: \"egg hunt with yoshi\", content: \"blah blah blah\" }\r\n  ]\r\n};\r\n\r\nconst projectReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CREATE_PROJECT\":\r\n      return state;\r\n    case \"CREATE_PROJECT_ERROR\":\r\n      console.log(\"project created\", action.payload);\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default projectReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./authReducer.\";\r\nimport projectReducer from \"./projectReducer\";\r\nimport { firestoreReducer } from \"redux-firestore\";\r\nimport { firebaseReducer } from \"react-redux-firebase\";\r\n\r\n// Root Reducer will take all the reducers in our application and returns single reducer\r\n// ie return state\r\n// Now redux-firestore package we installed gives one readymade reducer called\r\n// Firestore reducer and combie it along others\r\n// Combine reducers is a function which will take reducre\r\n\r\nconst rootReducer = combineReducers({\r\n  auth: authReducer,\r\n  project: projectReducer,\r\n  firestore: firestoreReducer,\r\n  firebase: firebaseReducer\r\n});\r\n\r\n// Now we can get any details from the store  using auth, project\r\n\r\nexport default rootReducer;\r\n","// Import app from firebase\r\n// because we need only app we dont need all of it\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\n// Initialize Firebase\r\nconst config = {\r\n  apiKey: \"AIzaSyD0k9esZsACHUUiIaEL_yHBjwwCzPVtqKI\",\r\n  authDomain: \"netninja-react-redux-fir-84f98.firebaseapp.com\",\r\n  databaseURL: \"https://netninja-react-redux-fir-84f98.firebaseio.com\",\r\n  projectId: \"netninja-react-redux-fir-84f98\",\r\n  storageBucket: \"netninja-react-redux-fir-84f98.appspot.com\",\r\n  messagingSenderId: \"60463537235\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\nfirebase.firestore();\r\n\r\nexport default firebase;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Adding Redux to our application\n// Install redux react-redux\n// Import createStore from redux\n// this createStore will take root reducer as an argument  and gives u the store\n// Definetely we want to conatct with database at some point of time\n// which is an async call\n// To make async calls in redux we need to import some middlewares\n// middlewares are store enhancers they just enhance our store\n// here we are using redux thunk;\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./store/reducers/rootReducer\";\n\n// Add firebase to our project\n// import config file here\nimport firebase from \"./config/firebaseConfig\";\n\n// Add two more imports to add firebase to redux\nimport { reduxFirestore, getFirestore } from \"redux-firestore\";\nimport { reactReduxFirebase, getFirebase } from \"react-redux-firebase\";\n\n// Now add these two to our store enhancer so that redux knows how to use firebase\n// we can add them by using compose from redux\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n    reactReduxFirebase(firebase, {\n      useFirestoreForProfile: true,\n      userProfile: \"users\",\n      attachAuthIsReady: true\n    }),\n    reduxFirestore(firebase)\n  )\n);\n\n// Now we need to wrap this store around our main Ap so that every component\n// inside our app can get access to store\n\n//attachAuthIsReady -> we make sure until the respose from firebase is ready\n// we are not going to render our app in DOM\nstore.firebaseAuthIsReady.then(() => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}